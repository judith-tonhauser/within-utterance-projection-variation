# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
m.b
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #1.266503
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.932
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #13.70588
#estimate
hypothesis(m.b,"utteranceknowMneg < 0")$hypothesis$Estimate #0.4250258
# posterior probability
hypothesis(m.b,"utteranceknowMneg < 0")$hypothesis$Post.Prob #0.7296071
# Bayes factor
hypothesis(m.b,"utteranceknowMneg < 0")$hypothesis$Evid.Ratio #2.698323
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #0.4250258
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.7296071
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #2.698323
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# target data is BEL ratings for think-neg and know-neg
t = d %>%
filter(responseTo == "BEL") %>%
filter(qud == "CC?") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(t) #70
nrow(t) #78
# because rating assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (n−1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
summary(t$rating)
t$betarating = (t$rating*(nrow(t)-1) + .5)/nrow(t)
summary(t$betarating)
# because rating assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (n−1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
summary(t$rating)
t$betarating = (t$rating*(nrow(t)-1) + .5)/nrow(t)
summary(t$betarating)
# set reference levels
t = t %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
levels(t$utterance)
# fit the model
prior = get_prior(betarating ~ utterance + (1|content),family = Beta(),data=t)
prior
betamodel = bf(betarating ~ utterance + (1+utterance|content),
phi ~ utterance, # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
cores = 4, iter = 8000, warmup = 1000,
control = list(adapt_delta = .9999999,max_treedepth=20))
# model summary
summary(m.b)
# save the model
saveRDS(m.b,file="../models/projection-of-BEL-under-CCqud.rds")
# read the model
m.b <- readRDS(file="../models/projection-of-BEL-under-CCqud.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
m.b
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #1.266503
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.932
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #13.70588
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# target data is BEL ratings for think-neg and know-neg under CC? QUD
t = d %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(t) #78
nrow(t) #148
# because rating assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (n−1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
summary(t$rating)
t$betarating = (t$rating*(nrow(t)-1) + .5)/nrow(t)
summary(t$betarating)
# set reference levels
t = t %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
levels(t$utterance)
# fit the model
prior = get_prior(betarating ~ utterance + (1|content),family = Beta(),data=t)
prior
# fit the model
prior = get_prior(betarating ~ utterance + (1|qud) + (1|content),family = Beta(),data=t)
prior
betamodel = bf(betarating ~ utterance + (1+utterance|qud) + (1+utterance|content),
phi ~ utterance, # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
cores = 4, iter = 8000, warmup = 1000,
control = list(adapt_delta = .9999999,max_treedepth=20))
# model summary
summary(m.b)
# save the model
saveRDS(m.b,file="../models/projection-of-BEL-under-CCqud.rds")
# read the model
m.b <- readRDS(file="../models/projection-of-BEL-under-CCqud.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
m.b
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #1.266503
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.9330357
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #13.93333
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
# load required packages
library(tidyverse)
library(lme4)
library(lmerTest)
library(forcats)
# load helper functions
source('../../../helpers.R')
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL? QUD, BEL ratings and the relevant utterances
d = d %>%
filter(qud == "BEL?") %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d)
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"),
qud = fct_relevel(qud, "BEL?"))
m = lmer(rating ~ utterance*qud + (1+utterance+qud|content), data=d)
m = lmer(rating ~ utterance + (1+utterance|content), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL? QUD, BEL ratings and the relevant utterances
d = d %>%
filter(qud == "CC?") %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d) #70
nrow(d) #78
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"),
qud = fct_relevel(qud, "BEL?"))
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL? QUD, BEL ratings and the relevant utterances
d = d %>%
filter(qud == "BEL?") %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d) #70
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
m = lmer(rating ~ utterance + (1+utterance|content), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL? QUD, BEL ratings and the relevant utterances
d = d %>%
filter(qud == "CC?") %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
m = lmer(rating ~ utterance + (1+utterance|content), data=d)
summary(m)
m = lmer(rating ~ utterance + (1+utterance|content), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL ratings and the relevant utterances
d = d %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d) #78
nrow(d) #148
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
m = lmer(rating ~ utterance + (1+utterance|content) + ((1+utterance|qud)), data=d)
m = lmer(rating ~ utterance + (1+utterance|content) + (1+utterance|qud), data=d)
m = lmer(rating ~ utterance + (1+utterance|content) + (1|qud), data=d)
m = lmer(rating ~ utterance + (1|content) + (1|qud), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL ratings and the relevant utterances
d = d %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d) #148
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
m = lmer(rating ~ utterance + (1|content) + (1|qud), data=d)
summary(m)
m = lmer(rating ~ utterance+qud + (1|content), data=d)
summary(m)
m = lmer(rating ~ utterance + (1|content) + (1|qud), data=d)
summary(m)
m = lmer(rating ~ utterance*qud + (1|content), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL ratings and the relevant utterances
d = d %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d) #148
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"),
qud = fct_relevel(qud, "BEL?"))
m = lmer(rating ~ utterance*qud + (1|content), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# limit the data to BEL ratings and the relevant utterances
d = d %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(d) #148
# set reference levels
d = d %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
m = lmer(rating ~ utterance + (1|content) + (1|qud), data=d)
summary(m)
m = lmer(rating ~ utterance + (1|content) + (1+utterance|qud), data=d)
summary(m)
m = lmer(rating ~ utterance + (1+utterance|content) + (1+utterance|qud), data=d)
m = lmer(rating ~ utterance + (1|content) + (1+utterance|qud), data=d)
summary(m)
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# target data is BEL ratings for think-neg and know-neg under CC? QUD
t = d %>%
filter(responseTo == "BEL") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(t) #148
# because rating assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (n−1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
summary(t$rating)
t$betarating = (t$rating*(nrow(t)-1) + .5)/nrow(t)
summary(t$betarating)
# set reference levels
t = t %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
levels(t$utterance)
# fit the model
prior = get_prior(betarating ~ utterance + (1|qud) + (1|content),family = Beta(),data=t)
prior
betamodel = bf(betarating ~ utterance + (1+utterance|qud) + (1+utterance|content),
phi ~ utterance, # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
cores = 4, iter = 8000, warmup = 1000,
control = list(adapt_delta = .9999999,max_treedepth=20))
# model summary
summary(m.b)
# save the model
saveRDS(m.b,file="../models/projection-of-BEL-under-CCqud.rds")
# save the model
saveRDS(m.b,file="../models/projection-of-BEL-aggregatedQUDs.rds")
# read the model
m.b <- readRDS(file="../models/projection-of-BEL-aggregatedQUDs.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
m.b
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #1.010184
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.7921071
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #3.81017
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# target data is BEL ratings for think-neg and know-neg
t = d %>%
filter(responseTo == "BEL") %>%
filter(qud == "BEL?") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(t) #70
# because rating assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (n−1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
summary(t$rating)
t$betarating = (t$rating*(nrow(t)-1) + .5)/nrow(t)
summary(t$betarating)
# set reference levels
t = t %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
levels(t$utterance)
#levels(t$qud)
# fit the model
prior = get_prior(betarating ~ utterance + (1|content),family = Beta(),data=t)
prior
betamodel = bf(betarating ~ utterance + (1+utterance|content),
phi ~ utterance, # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
cores = 4, iter = 8000, warmup = 1000,
control = list(adapt_delta = .9999999,max_treedepth=20))
# model summary
summary(m.b)
# save the model
saveRDS(m.b,file="../models/projection-of-BEL-under-BELqud.rds")
# read the model
m.b <- readRDS(file="../models/projection-of-BEL-under-BELqud.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #0.4250258
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.7296071
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #2.698323
##### comparison of BEL-ratings under CC? QUD ----
# load data
d = read_csv("../data/cd.csv")
nrow(d) #327
# transform the data
d = d %>%
gather(responseTo, rating, responseCC:responseMC) %>%
mutate(responseTo = recode(responseTo, "responseCC" = "CC", "responseMC" = "BEL")) %>%
mutate(qud = recode(qud, "ai" = "CC?", "nai" = "BEL?"))
nrow(d) #654
# target data is BEL ratings for think-neg and know-neg under CC? QUD
t = d %>%
filter(responseTo == "BEL") %>%
filter(qud == "CC?") %>%
filter(utterance == "think-neg" | utterance == "know-neg")
nrow(t) #78
# because rating assumes values of 0 and 1, which beta regression cannot handle, transform: (Smithson & Verkuilen 2006)
# y_new = (y_old * (n−1) + 0.5) / n (where n is the sample size)
# note: first rescaling of y'=(y-a)/(b-a) not necessary because highest and lowest value are 0 and 1 already
summary(t$rating)
t$betarating = (t$rating*(nrow(t)-1) + .5)/nrow(t)
summary(t$betarating)
# set reference levels
t = t %>%
mutate(utterance = fct_relevel(utterance, "think-neg"))
levels(t$utterance)
#levels(t$qud)
# fit the model
prior = get_prior(betarating ~ utterance + (1|content),family = Beta(),data=t)
prior
betamodel = bf(betarating ~ utterance + (1+utterance|content),
phi ~ utterance, # beta distribution's precision
family = Beta())
m.b = brm(formula = betamodel,
family=Beta(),
data=t,
cores = 4, iter = 8000, warmup = 1000,
control = list(adapt_delta = .9999999,max_treedepth=20))
# model summary
summary(m.b)
# save the model
saveRDS(m.b,file="../models/projection-of-BEL-under-CCqud.rds")
# read the model
m.b <- readRDS(file="../models/projection-of-BEL-under-CCqud.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
m.b
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #1.266503
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.9330357
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #13.93333
# read the model
m.b <- readRDS(file="../models/projection-of-BEL-aggregatedQUDs.rds")
m.b
# run posterior predictive checks
p1 <- pp_check(m.b, type = "dens_overlay_grouped", group = "utterance", ndraws = 100) +
scale_x_continuous(breaks = seq(0,1,by=.25))
p1
# hypothesis testing
m.b
#estimate
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Estimate #0.9448045
# posterior probability
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Post.Prob #0.7785714
# Bayes factor
hypothesis(m.b,"utteranceknowMneg > 0")$hypothesis$Evid.Ratio #3.516129
